import random
import options
import sets
import sequtils
import algorithm

var rng = random.initRand()

proc initRand*(seed: int) =
  ## Initialize random number generator using given `seed`.
  ## It is strongly recommended to call this before everything is executed
  ## to make experiments performed with this simulator reproducible.
  ## Even if this is not called, the generator is initialized with the default
  ## `random.initRand()` procedure.
  rng = random.initRand(seed)

proc rand*[T: int or float](lb, ub: T): T =
  ## Returns random number between `lb` and `ub` (including `lb` and `ub`).
  rng.rand(lb..ub)

proc shuffle*[T](xs: seq[T]): seq[T] =
  ## Returns a sequence which was generated by shuffling `xs`.
  var ys = xs
  rng.shuffle(ys)
  ys

proc takeN*[T](xs: seq[T], n: int): Option[seq[T]] =
  ## Returns `n` element in `xs` randomly.
  ## If the number of elements in `xs` is less than `n`, `none(T)` is returned; 
  ## otherwise `some(ys)` is returned where `ys` contains exactly `n` elements 
  ## which are also elements of `xs`.
  if xs.len < n:
    none(seq[T])
  else:
    var idx = initHashSet[int]()
    while idx.len < n:
      ## Specify the module to avoid conflict
      idx.incl(randomUtils.rand(0, xs.len - 1))
    some(idx.items.toSeq.sorted.mapIt(xs[it]))

proc choose*[T](xs: seq[T]): Option[T] =
  ## Returns one element in `xs` randomly.
  ## If `xs` is an empty seq, `none(T)` is returned; otherwise `some(x)` is returned
  ## where `x` is an element of `xs`.
  let taken = takeN(xs, 1)
  if taken.isSome():
    some(taken.get()[0])
  else:
    none(T)

template withProbability*(prob: float, body: untyped): untyped =
  ## With probability `prob`, do `body`.
  if rand(0.0, 1.0) <= prob:
    body